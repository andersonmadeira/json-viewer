{"version":3,"sources":["components/button/styles.ts","components/card/index.ts","app/styles.ts","app/index.tsx","reportWebVitals.ts","styles/global-styles.tsx","index.tsx","styles/theme.ts"],"names":["Button","styled","button","props","theme","colors","primary","primaryDark","disabled","Card","div","Container","main","ContentWrapper","FormattedArea","Content","textarea","FormatButton","Warning","p","Label","label","ContentArea","id","value","onChange","style","event","target","spellCheck","rows","formatJSON","text","JSON","stringify","parse","App","useState","textInput","setTextInput","isValid","setIsValid","formatted","setFormatted","finalFormattedJSON","useMemo","prism","highlight","languages","javascript","htmlFor","color","validateJSON","onClick","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","styles","css","ReactDOM","render","StrictMode","primaryLight","document","getElementById"],"mappings":"quBAEO,IAAMA,EAASC,IAAOC,OAAV,KAWH,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAC1B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAK5B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,eAG5B,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,Y,kXCpBvC,IAAMC,EAAOR,IAAOS,IAAV,K,2nCCCV,IAAMC,EAAYV,IAAOW,KAAV,KAMTC,EAAiBZ,YAAOQ,EAAPR,CAAH,KAIda,EAAgBb,YAAOQ,EAAPR,CAAH,KAKbc,EAAUd,IAAOe,SAAV,KA2BF,SAAAb,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,eAIjCU,EAAehB,YAAOD,EAAPC,CAAH,KAIZiB,EAAUjB,IAAOkB,EAAV,KAKPC,EAAQnB,IAAOoB,MAAV,KCtClB,SAASC,EAAT,GAAwE,IAAjDC,EAAgD,EAAhDA,GAAIC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,MAC1C,OACE,cAACb,EAAD,UACE,cAACE,EAAD,CACEQ,GAAIA,EACJC,MAAOA,EACPC,SAAU,SAAAE,GAAK,OAAIF,GAAYA,EAASE,EAAMC,OAAOJ,QACrDK,WAAW,QACXC,KAAM,GACNJ,MAAOA,MAef,SAASK,EAAWC,GAClB,OAAOC,KAAKC,UAAUD,KAAKE,MAAMH,GAAO,KAAM,MAGjC,SAASI,IAAO,IAAD,EACMC,mBAAS,IADf,mBACrBC,EADqB,KACVC,EADU,OAEEF,qBAFF,mBAErBG,EAFqB,KAEZC,EAFY,OAGMJ,mBAAS,IAHf,mBAGrBK,EAHqB,KAGVC,EAHU,KAKtBC,EAAqBC,mBACzB,iBACgB,KAAdH,EACII,IAAMC,UAAUL,EAAWI,IAAME,UAAUC,WAAY,cACvD,KACN,CAACP,IAGH,OACE,eAAC/B,EAAD,WACE,cAACS,EAAD,CAAO8B,QAAQ,aAAf,8BACA,cAAC5B,EAAD,CACEC,GAAG,aACHG,MAAqB,KAAdY,GAAqBE,EAAgC,GAAtB,CAAEW,MAAO,UAC/C3B,MAAOc,EACPb,SAAU,SAAAO,GACR,IAAMQ,EAlChB,SAAsBR,GACpB,IAEE,OADAD,EAAWC,IACJ,EACP,SACA,OAAO,GA6BeoB,CAAapB,GAC7BS,EAAWD,GACXG,GAAa,SAAAD,GAAS,OAAMF,EAAeE,EAAL,MACtCH,EAAaP,MAGjB,cAACf,EAAD,CACET,SAAwB,KAAd8B,IAAqBE,EAC/Ba,QAAS,kBAAMV,EAAaZ,EAAWO,KAFzC,oBAMwB,KAAvBM,GAA6BJ,GAC5B,cAAC1B,EAAD,CACEwC,wBAAyB,CAAEC,OAAQX,KAGxB,KAAdN,IAAqBE,GACpB,cAACtB,EAAD,sDCrFR,IAYesC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+dCPP,SAASQ,IACd,OACE,cAAC,IAAD,CACEC,OAAQC,YAAF,OCGZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAelE,MCRS,CAC1BC,OAAQ,CACNC,QAAS,UACTiE,aAAc,UACdhE,YAAa,UACbC,SAAU,YDGV,UACE,cAACyD,EAAD,IACA,cAAC7B,EAAD,SAGJoC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.254e2a20.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nexport const Button = styled.button`\n  font-size: 1.2em;\n  color: #fff;\n  font-weight: 700;\n  border: none;\n  border-radius: 2px;\n  height: 40px;\n  padding-left: 20px;\n  padding-right: 20px;\n  display: inline-block;\n  box-shadow: 0 6px 16px 0 rgba(67, 184, 201, 0.2);\n  background: ${props => props.theme.colors.primary};\n  border-color: ${props => props.theme.colors.primary};\n  outline: none;\n  cursor: pointer;\n  transition: all 0.5s ease;\n  &:hover {\n    background: ${props => props.theme.colors.primaryDark};\n  }\n  &:disabled {\n    background: ${props => props.theme.colors.disabled};\n    cursor: not-allowed;\n  }\n`\n","import styled from '@emotion/styled'\n\nexport const Card = styled.div`\n  position: relative;\n  font-family: monospace;\n  background-color: #fff;\n  box-shadow: rgba(184, 194, 215, 0.35) 0px 6px 9px 0px;\n  border-radius: 8px;\n  margin-top: 20px;\n  overflow-wrap: break-word;\n  transition: box-shadow 0.4s ease-in-out 0s,\n    background-color 0.4s ease-in-out 0s;\n`\n","import styled from '@emotion/styled'\nimport { Button, Card } from '../components'\n\nexport const Container = styled.main`\n  max-width: 700px;\n  margin: 0 auto;\n  padding: 20px;\n`\n\nexport const ContentWrapper = styled(Card)`\n  padding: 16px 24px;\n`\n\nexport const FormattedArea = styled(Card)`\n  white-space: pre-wrap;\n  padding: 16px 24px;\n`\n\nexport const Content = styled.textarea`\n  width: 100%;\n  z-index: 5;\n  outline: none;\n  display: block;\n  border: 0;\n  resize: none;\n  border-radius: 8px;\n\n  ::placeholder {\n    text-align: center;\n    font-size: 1.2rem;\n  }\n\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: ${props => props.theme.colors.primaryDark};\n  }\n`\n\nexport const FormatButton = styled(Button)`\n  margin-top: 20px;\n`\n\nexport const Warning = styled.p`\n  color: tomato;\n  font-weight: bold;\n`\n\nexport const Label = styled.label`\n  font-size: 1.2rem;\n`\n","import { useEffect, useMemo, useState } from 'react'\nimport prism from 'prismjs'\n\nimport {\n  Container,\n  ContentWrapper,\n  Content,\n  FormattedArea,\n  FormatButton,\n  Warning,\n  Label,\n} from './styles'\n\nexport interface ContentAreaProps {\n  id: string\n  value?: string\n  onChange?: (text: string) => void\n  style?: React.CSSProperties | undefined\n}\n\nfunction ContentArea({ id, value, onChange, style }: ContentAreaProps) {\n  return (\n    <ContentWrapper>\n      <Content\n        id={id}\n        value={value}\n        onChange={event => onChange && onChange(event.target.value)}\n        spellCheck=\"false\"\n        rows={10}\n        style={style}\n      />\n    </ContentWrapper>\n  )\n}\n\nfunction validateJSON(text: string): boolean {\n  try {\n    formatJSON(text)\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction formatJSON(text: string): string {\n  return JSON.stringify(JSON.parse(text), null, '  ')\n}\n\nexport default function App() {\n  const [textInput, setTextInput] = useState('')\n  const [isValid, setIsValid] = useState<boolean>()\n  const [formatted, setFormatted] = useState('')\n\n  const finalFormattedJSON = useMemo(\n    () =>\n      formatted !== ''\n        ? prism.highlight(formatted, prism.languages.javascript, 'javascript')\n        : '',\n    [formatted]\n  )\n\n  return (\n    <Container>\n      <Label htmlFor=\"json-input\">Paste your JSON:</Label>\n      <ContentArea\n        id=\"json-input\"\n        style={textInput !== '' && !isValid ? { color: 'tomato' } : {}}\n        value={textInput}\n        onChange={text => {\n          const isValid = validateJSON(text)\n          setIsValid(isValid)\n          setFormatted(formatted => (!isValid ? '' : formatted))\n          setTextInput(text)\n        }}\n      />\n      <FormatButton\n        disabled={textInput === '' || !isValid}\n        onClick={() => setFormatted(formatJSON(textInput))}\n      >\n        Format\n      </FormatButton>\n      {finalFormattedJSON !== '' && isValid && (\n        <FormattedArea\n          dangerouslySetInnerHTML={{ __html: finalFormattedJSON }}\n        />\n      )}\n      {textInput !== '' && !isValid && (\n        <Warning>The text entered is not a valid JSON</Warning>\n      )}\n    </Container>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { css, Global } from '@emotion/react'\n\nexport function GlobalStyles() {\n  return (\n    <Global\n      styles={css`\n        @import url('https://fonts.googleapis.com/css?family=Rubik&display=swap');\n        * {\n          box-sizing: border-box;\n        }\n        html,\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        body {\n          background-color: #f3f7f7;\n          font-family: 'Rubik', sans-serif;\n          color: #39424e;\n          font-size: 14px;\n        }\n      `}\n    />\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from '@emotion/react'\n\nimport App from './app'\nimport reportWebVitals from './reportWebVitals'\nimport { GlobalStyles, theme } from './styles'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { Theme } from '@emotion/react'\n\nexport const theme: Theme = {\n  colors: {\n    primary: '#27A4CE',\n    primaryLight: '#f8fbfc',\n    primaryDark: '#53C0E4',\n    disabled: '#808080',\n  },\n}\n"],"sourceRoot":""}